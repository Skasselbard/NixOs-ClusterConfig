{
  inputs = {

    # Import nixpkgs
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-24.05";

    # Import clusterConfig flake
    # Change this import to the github url
    clusterConfigFlake = {
      inputs.nixpkgs.follows = "nixpkgs";
      url = "path:../..";
    };

    # Import disko to configure partitioning
    # If you want to use disko for formatinf, this option is required
    disko = {
      url = "github:nix-community/disko/v1.1.0";
      inputs.nixpkgs.follows = "nixpkgs";
    };

  };

  outputs = inputs@{ self, nixpkgs, clusterConfigFlake, ... }:

    let # Definitions and imports

      system = "x86_64-linux";

      # The filters are used to resolve hosts when expanding the ClusterConfig
      filters = clusterConfigFlake.lib.filters;

      # Configuration from other Layers, e.g.: NixOs machine configurations
      configurations = import "${self}/../00-exampleConfigs/";
      secrets = configurations.secrets;
      machines = configurations.machines;
    in let

      clusterConfig = clusterConfigFlake.lib.buildCluster {

        modules = [ clusterConfigFlake.clusterConfigModules.default ];

        domain = {
          suffix = "com";

          clusters = {

            # the cluster name will also be used for fqdn generation
            example = {

              services = {
                # Static DNS via /etc/hosts file
                dns = {
                  roles.hosts = [ filters.clusterMachines ];
                  selectors = [ filters.clusterMachines ];
                  definition = clusterConfigFlake.clusterServices.staticDns;
                };
              };

              users.root.systemConfig = {
                extraGroups = [ "wheel" ];
                # 'root'
                hashedPassword = secrets.pswdHash.root;
                openssh.authorizedKeys.keys = [ secrets.ssh.publicKey ];
              };

              machines = {

                vm0 = {
                  inherit system;
                  nixosModules = [ machines.vm0 ];

                  deployment = {
                    targetHost = "192.168.100.10";

                    # if the deployment.format atribute is null (or unset)
                    # no script will be executed
                    formatScript = null;
                  };

                };

                vm1 = {
                  inherit system;
                  nixosModules =
                    [ machines.vm1 inputs.disko.nixosModules.default ];

                  deployment = {
                    targetHost = "192.168.100.11";
                    # If the deployment.format atribute is set to "disko"
                    # the script generated by disko (set with the `disko` configuration attribute)
                    # will be executed
                    # This requires a disko configuration and importing disko as flake input (as we do in the beginning of the file)
                    # See the disko dokumentation on how to define the diskoo attribute:
                    # https://github.com/nix-community/disko
                    formatScript = "disko";
                  };

                };

                vm2 = {
                  inherit system;
                  nixosModules =
                    [ machines.vm2 inputs.disko.nixosModules.default ];

                  deployment = {
                    targetHost = "192.168.100.12";
                    
                    # You can define your own format script.
                    # This will be interpreted as a bash script.
                    # As a result, you can run other scripting action before the installation here.
                    #
                    # For this example we extract the script build with the disko configuration manually.
                    # This can come in handy if you want to use part of your disko configuiration 
                    # for formatting (e.g. the OS) but another part should not be touched (like data drives).
                    # You can then define multiple disko configurations
                    # (e.g. one for ephemeral OS and one for the persistent data)
                    # and only use the ephemeral config for fromatting.
                    # However, for the final machine configuration, you have to merge both configurations again
                    # to configure mounting points and the like.
                    formatScript = TODO: own script, load disko script as example;
                  };

                };

              };
            };

          };

        };
      };

      # DO NOT FORGET!
    in clusterConfig; # use the generated cluster config as the flake content
}
